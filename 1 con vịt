import tkinter as tk
from tkinter import PhotoImage, Canvas, Tk
from PIL import Image, ImageTk
import pygame 

root = tk.Tk()
root.title('Music Sheet Interface')

# T·∫°o canvas ƒë·ªÉ v·∫Ω c√°c d√≤ng nh·∫°c v√† block
canvas = tk.Canvas(root, width=1800, height=400)
image = Image.open('1.jpg')
resized_image = image.resize((1300, 400), Image.LANCZOS) # resize((1550, 400) t√πy lo·∫°i m√°y
background_image = ImageTk.PhotoImage(resized_image)

# ƒê·∫∑t h√¨nh ·∫£nh l√†m background
canvas.create_image(0, 0, anchor='nw', image=background_image)
canvas.pack()
canvas.focus_set()

# V·∫Ω c√°c d√≤ng nh·∫°c
num_lines = 5
line_spacing = 20
top_margin = 150

for i in range(num_lines):
    y_position = top_margin + i * line_spacing
    canvas.create_line(50, y_position, 1550, y_position, fill='white', width=2)

# V·∫Ω c√°c d√≤ng nh·∫°c bass
bass_top_margin = 250
# for i in range(num_lines):
#     y_position = bass_top_margin + i * line_spacing
#     canvas.create_line(50, y_position, 1750, y_position, fill='white', width=2)

# V·∫Ω kh√≥a Sol v√† n·ªët thƒÉng
treble_clef = canvas.create_text(120-25, top_margin + 1.5 * line_spacing, text="ùÑû", fill='white', font=("Segoe UI Symbol", 92))

gam_clef = canvas.create_text(120+15, top_margin + 1.5 * line_spacing-30, text="‚ôØ", fill='white', font=("Segoe UI Symbol", 40))

# T·∫°o d√≤ng ch·ªâ b√°o (cursor) c·ªë ƒë·ªãnh
cursor = canvas.create_rectangle(200, top_margin - 60, 205, bass_top_margin + 4 * line_spacing -30, fill='cyan')

# Danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ c√°c block v√† th√¥ng tin li√™n quan
blocks = []

# H√†m ƒë·ªÉ t·∫°o block cho m·ªói n·ªët nh·∫°c
def create_block(note, time_to_appear, y_position):
    x_position = 3630 - time_to_appear * 50  # V·ªã tr√≠ x ph·ª• thu·ªôc v√†o th·ªùi gian xu·∫•t hi·ªán
    block = canvas.create_text(x_position, y_position, text="‚ô©", fill='black', font=("Segoe UI Symbol", 80),tags=('note',))
    #ledger_line = canvas.create_line(x_position - 20, y_position +30, x_position + 20, y_position +30, fill='black', width=2)
    blocks.append((block, y_position))
    #blocks.append((ledger_line, y_position))

    print(y_position)
    create_ledger_line( x_position,y_position, top_margin)

def create_ledger_line(x_position, y_position, top_margin):
    # Ki·ªÉm tra xem n·ªët nh·∫°c c√≥ c·∫ßn d√≤ng k·∫ª ph·ª• kh√¥ng
    if y_position < top_margin or y_position > 200:
        ledger_line = canvas.create_line(x_position - 20, y_position +30, x_position + 20, y_position +30, fill='black', width=2,tags=('note',))
        blocks.append((ledger_line, y_position))
    

def move_blocks():
    for block, y_position in blocks:
        canvas.move(block, -10, 0)  # Di chuy·ªÉn m·ªói block sang tr√°i 10 pixels
    root.after(100, move_blocks)

def update():
    # L·∫•y t·ªça ƒë·ªô c·ªßa cursor
    cursor_coords = canvas.coords(cursor)
    # T√¨m t·∫•t c·∫£ c√°c items ch·ªìng l·∫•p v·ªõi cursor
    overlapping_items = canvas.find_overlapping(*cursor_coords)
    
    for item in overlapping_items:
        # Ki·ªÉm tra xem item c√≥ ph·∫£i l√† n·ªët nh·∫°c kh√¥ng (v√≠ d·ª•: ki·ªÉm tra tag ho·∫∑c ki·ªÉu c·ªßa item)
        if is_note_item(item):
            # X√≥a item n·ªët nh·∫°c kh·ªèi canvas
            canvas.delete(item)
    
    # C·∫≠p nh·∫≠t l·∫°i canvas sau m·ªói kho·∫£ng th·ªùi gian (v√≠ d·ª•: 100ms)
    canvas.after(100, update)

def is_note_item(item):
    tags = canvas.gettags(item)
    return 'note' in tags


# H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi k√Ω hi·ªáu n·ªët nh·∫°c th√†nh v·ªã tr√≠ tr√™n d√≤ng nh·∫°c
def note_to_position(note):
    note_positions = {
        'C4': top_margin + 3.4 * line_spacing,
        'D4': top_margin + 2.9 * line_spacing,
        'E4': top_margin + 2.4 * line_spacing,
        'F4': top_margin + 1.9 * line_spacing,
        'G4': top_margin + 1.4 * line_spacing,
        'A4': top_margin + 0.9 * line_spacing,
        'B4': top_margin + 0.4 * line_spacing,
        'C5': top_margin - 0.1 * line_spacing,
        'D5': top_margin - 0.6 * line_spacing,
        'E5': top_margin - 1.1 * line_spacing,
    }
    return note_positions.get(note, top_margin + 2 * line_spacing)  # M·∫∑c ƒë·ªãnh G4

# H√†m ƒë·ªÉ t·∫°o c√°c block t·ª´ sheet music
def create_blocks_from_sheet(sheet):
    for note_info in sheet:
        note, time_to_appear = note_info
        y_position = note_to_position(note)
        create_block(note, time_to_appear, y_position)

# V√≠ d·ª• sheet music cho "1 con v·ªãt"
sheet_music = [
    ('C4', 32), ('F4', 31), ('C4', 30), # do fa do,
    ('C4', 29), ('F4', 28.5), ('F4', 28), ('G4', 27), ('A4', 26), # do fa fa sol la
    ('A4', 24), ('F4', 23), ('C4', 22), # la fa do
    ('A4', 21.3333), ('A4', 20.6667), ('A4',20.3333), ('C4', 19), ('C4', 18.6667), ('C4', 18.3333), # la la la do do do
    ('C4', 16), ('C4', 15), ('A4', 14), # do do la
    ('A4',  12.8667), ('C4', 12.5334), ('C4', 12.2), ('C4', 11.2), ('A4', 10.2), # la do do do la
    ('A4', 8.3333), ('F4', 7.3333), ('C4', 6.3333), # la fa do
    ('A4', 5.3333), ('A4', 5), ('A4', 4.6667), ('G4', 3.3333), ('F4', 2.3333) # la la la sol fa
]

# T·∫°o c√°c block t·ª´ sheet music
create_blocks_from_sheet(sheet_music)

pygame.init()
sound = pygame.mixer.Sound("1duck.mp3")
sound.play()

move_blocks()

update()

root.mainloop()
