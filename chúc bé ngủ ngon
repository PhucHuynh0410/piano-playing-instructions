import tkinter as tk
from tkinter import PhotoImage, Canvas, Tk
from PIL import Image, ImageTk
import pygame 

root = tk.Tk()
root.title('Music Sheet Interface')

# T·∫°o canvas ƒë·ªÉ v·∫Ω c√°c d√≤ng nh·∫°c v√† block
canvas = tk.Canvas(root, width=1800, height=400)
image = Image.open('1.jpg')
resized_image = image.resize((1300, 400), Image.LANCZOS) # resize((1550, 400) t√πy lo·∫°i m√°y
background_image = ImageTk.PhotoImage(resized_image)

# ƒê·∫∑t h√¨nh ·∫£nh l√†m background
canvas.create_image(0, 0, anchor='nw', image=background_image)
canvas.pack()
canvas.focus_set()

# V·∫Ω c√°c d√≤ng nh·∫°c
num_lines = 5
line_spacing = 20
top_margin = 150

for i in range(num_lines):
    y_position = top_margin + i * line_spacing
    canvas.create_line(50, y_position, 1550, y_position, fill='white', width=2)

# V·∫Ω c√°c d√≤ng nh·∫°c bass
bass_top_margin = 250
# for i in range(num_lines):
#     y_position = bass_top_margin + i * line_spacing
#     canvas.create_line(50, y_position, 1750, y_position, fill='white', width=2)

# V·∫Ω kh√≥a Sol v√† n·ªët thƒÉng
treble_clef = canvas.create_text(120-25, top_margin + 1.5 * line_spacing, text="ùÑû", fill='white', font=("Segoe UI Symbol", 92))

# gam_clef = canvas.create_text(120+35, top_margin + 1.5 * line_spacing-30, text="‚ôØ", fill='white', font=("Segoe UI Symbol", 40))

# T·∫°o d√≤ng ch·ªâ b√°o (cursor) c·ªë ƒë·ªãnh
cursor = canvas.create_rectangle(200, top_margin - 60, 205, bass_top_margin + 4 * line_spacing -30, fill='cyan')

# Danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ c√°c block v√† th√¥ng tin li√™n quan
blocks = []

# H√†m ƒë·ªÉ t·∫°o block cho m·ªói n·ªët nh·∫°c
def create_block(note, time_to_appear, y_position):
    x_position = 4450 - time_to_appear * 50  # V·ªã tr√≠ x ph·ª• thu·ªôc v√†o th·ªùi gian xu·∫•t hi·ªán
    block = canvas.create_text(x_position, y_position, text="‚ô©", fill='black', font=("Segoe UI Symbol", 80),tags=('note',))
    #ledger_line = canvas.create_line(x_position - 20, y_position +30, x_position + 20, y_position +30, fill='black', width=2)
    blocks.append((block, y_position))
    #blocks.append((ledger_line, y_position))

    create_ledger_line( x_position, y_position, top_margin)

def create_ledger_line(x_position, y_position, top_margin):
    # Ki·ªÉm tra xem n·ªët c√≥ c·∫ßn d√≤ng k·∫ª ph·ª• kh√¥ng
    if 220 > y_position > 210:
        ledger_line = canvas.create_line(x_position - 20, y_position + 30, x_position + 20, y_position + 30, fill='black', width=2,tags=('note',))
        blocks.append((ledger_line, y_position))
    if 230 > y_position > 220:
        ledger_line = canvas.create_line(x_position - 15, y_position + 19.6, x_position + 20, y_position + 19.6, fill='black', width=2,tags=('note',))
        blocks.append((ledger_line, y_position))
    if 240 > y_position > 230:
        ledger_line1 = canvas.create_line(x_position - 20, y_position + 30, x_position + 20, y_position + 30, fill='black', width=2,tags=('note',))
        ledger_line2 = canvas.create_line(x_position - 17, y_position + 10, x_position + 20, y_position + 10, fill='black', width=2,tags=('note',))
        blocks.append((ledger_line1, y_position))
        blocks.append((ledger_line2, y_position))
    

def move_blocks():
    for block, y_position in blocks:
        canvas.move(block, -10, 0)  # Di chuy·ªÉn m·ªói block sang tr√°i 10 pixels
    root.after(100, move_blocks)

def update():
    # L·∫•y t·ªça ƒë·ªô c·ªßa cursor
    cursor_coords = canvas.coords(cursor)
    # T√¨m t·∫•t c·∫£ c√°c items ch·ªìng l·∫•p v·ªõi cursor
    overlapping_items = canvas.find_overlapping(*cursor_coords)
    
    for item in overlapping_items:
        # Ki·ªÉm tra xem item c√≥ ph·∫£i l√† n·ªët nh·∫°c kh√¥ng (v√≠ d·ª•: ki·ªÉm tra tag ho·∫∑c ki·ªÉu c·ªßa item)
        if is_note_item(item):
            # X√≥a item n·ªët nh·∫°c kh·ªèi canvas
            canvas.delete(item)
    
    # C·∫≠p nh·∫≠t l·∫°i canvas sau m·ªói kho·∫£ng th·ªùi gian (v√≠ d·ª•: 100ms)
    canvas.after(100, update)

def is_note_item(item):
    tags = canvas.gettags(item)
    return 'note' in tags


# H√†m ƒë·ªÉ chuy·ªÉn ƒë·ªïi k√Ω hi·ªáu n·ªët nh·∫°c th√†nh v·ªã tr√≠ tr√™n d√≤ng nh·∫°c
def note_to_position(note):
    note_positions = {
        'A4': top_margin + 4.4 * line_spacing,
        'B4': top_margin + 3.9 * line_spacing,
        'C5': top_margin + 3.4 * line_spacing,
        'D5': top_margin + 2.9 * line_spacing,
        'E5': top_margin + 2.4 * line_spacing,
        'F5': top_margin + 1.9 * line_spacing,
        'G5': top_margin + 1.4 * line_spacing,
        'A5': top_margin + 0.9 * line_spacing,
        'B5': top_margin + 0.4 * line_spacing,
        'C6': top_margin - 0.1 * line_spacing,
        'D6': top_margin - 0.6 * line_spacing,
        'E6': top_margin - 1.1 * line_spacing,
    }
    return note_positions.get(note, top_margin + 2 * line_spacing)  

# H√†m ƒë·ªÉ t·∫°o c√°c block t·ª´ sheet music
def create_blocks_from_sheet(sheet):
    for note_info in sheet:
        note, time_to_appear = note_info
        y_position = note_to_position(note)
        create_block(note, time_to_appear, y_position)

sheet_music = [
    ('G5', 52), ('E5', 50.6), ('C5', 49), ('E5', 48), ('E5', 46.5), ('F5', 45.5), ('E5', 45), ('C5', 43.5), # Sol Mi do Mi Mi Fa Mi do
    ('C5', 41), ('A5', 40.5), ('A5', 39), ('G5', 37.5), ('E5', 36), ('F5', 35), ('E5', 34), ('D4', 33), ('D4', 32), # Do La La Sol Mi Fa Mi Re Re
    ('G5', 28.8), ('E5', 27.3), ('C5', 26), ('E5', 24.5), ('E5', 23), ('F5', 22), ('E5', 21.2), ('C5', 20.2), # Sol Mi do Mi Mi Fa Mi do
    ('A4', 17), ('C5', 16), ('A4', 14), ('C5', 13), ('B4', 11.5), ('C5', 10.5), ('B4', 9.5), ('D5', 8.5), ('C5', 8), # La do la do xi do xi Re do
    ('A4', 5.5), ('C5', 3.5), ('A4', 2.5), ('C5', 1), ('A4', -0.5), ('B4', -2), ('C5', -3.5) # La do la do la xi do
]

# T·∫°o c√°c block t·ª´ sheet music
create_blocks_from_sheet(sheet_music)

pygame.init()
sound = pygame.mixer.Sound("Ngu_di.mp3")
sound.play()

move_blocks()

update()

root.mainloop()
